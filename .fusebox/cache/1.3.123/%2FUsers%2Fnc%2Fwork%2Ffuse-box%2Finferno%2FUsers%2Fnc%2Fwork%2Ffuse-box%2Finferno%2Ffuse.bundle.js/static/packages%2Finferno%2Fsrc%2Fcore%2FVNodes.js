module.exports = { contents : "import {\n    isArray,\n    isInvalid,\n    isNullOrUndef,\n    isStatefulComponent,\n    isUndefined,\n    assign\n} from '~/packages/inferno-shared/dist-es';\nimport VNodeFlags from 'inferno-vnode-flags';\nimport { normalize } from './normalization';\nimport options from './options';\nimport { EMPTY_OBJ } from '../DOM/utils';\nexport function createVNode(flags, type, props, children, events, key, ref, noNormalise) {\n    if (flags & VNodeFlags.ComponentUnknown) {\n        flags = isStatefulComponent(type) ? VNodeFlags.ComponentClass : VNodeFlags.ComponentFunction;\n    }\n    const vNode = {\n        children: isUndefined(children) ? null : children,\n        dom: null,\n        events: events || null,\n        flags,\n        key: isUndefined(key) ? null : key,\n        props: props || null,\n        ref: ref || null,\n        type\n    };\n    if (!noNormalise) {\n        normalize(vNode);\n    }\n    if (options.createVNode) {\n        options.createVNode(vNode);\n    }\n    return vNode;\n}\nexport function cloneVNode(vNodeToClone, props) {\n    let restParamLength = arguments.length - 2;\n    let children;\n    if (restParamLength > 0) {\n        if (!props) {\n            props = {};\n        }\n        if (restParamLength === 1) {\n            children = arguments[2];\n        } else {\n            children = [];\n            while (restParamLength-- > 0) {\n                children[restParamLength] = arguments[restParamLength + 2];\n            }\n        }\n        if (isUndefined(props.children)) {\n            props.children = children;\n        } else {\n            if (isArray(children)) {\n                if (isArray(props.children)) {\n                    props.children = props.children.concat(children);\n                } else {\n                    props.children = [props.children].concat(children);\n                }\n            } else {\n                if (isArray(props.children)) {\n                    props.children.push(children);\n                } else {\n                    props.children = [props.children];\n                    props.children.push(children);\n                }\n            }\n        }\n    }\n    let newVNode;\n    if (isArray(vNodeToClone)) {\n        const tmpArray = [];\n        for (let i = 0, len = vNodeToClone.length; i < len; i++) {\n            tmpArray.push(cloneVNode(vNodeToClone[i]));\n        }\n        newVNode = tmpArray;\n    } else {\n        const flags = vNodeToClone.flags;\n        const events = vNodeToClone.events || props && props.events || null;\n        const key = !isNullOrUndef(vNodeToClone.key) ? vNodeToClone.key : props ? props.key : null;\n        const ref = vNodeToClone.ref || (props ? props.ref : null);\n        if (flags & VNodeFlags.Component) {\n            newVNode = createVNode(flags, vNodeToClone.type, !vNodeToClone.props && !props ? EMPTY_OBJ : assign({}, vNodeToClone.props, props), null, events, key, ref, true);\n            const newProps = newVNode.props;\n            if (newProps) {\n                const newChildren = newProps.children;\n                if (newChildren) {\n                    if (isArray(newChildren)) {\n                        const len = newChildren.length;\n                        if (len > 0) {\n                            const tmpArray = [];\n                            for (let i = 0; i < len; i++) {\n                                const child = newChildren[i];\n                                if (!isInvalid(child) && isVNode(child)) {\n                                    tmpArray.push(cloneVNode(child));\n                                }\n                            }\n                            newProps.children = tmpArray;\n                        }\n                    } else if (isVNode(newChildren)) {\n                        newProps.children = cloneVNode(newChildren);\n                    }\n                }\n            }\n            newVNode.children = null;\n        } else if (flags & VNodeFlags.Element) {\n            children = props && props.children || vNodeToClone.children;\n            newVNode = createVNode(flags, vNodeToClone.type, !vNodeToClone.props && !props ? EMPTY_OBJ : assign({}, vNodeToClone.props, props), children, events, key, ref, !children);\n        } else if (flags & VNodeFlags.Text) {\n            newVNode = createTextVNode(vNodeToClone.children, key);\n        }\n    }\n    return newVNode;\n}\nexport function createVoidVNode() {\n    return createVNode(VNodeFlags.Void);\n}\nexport function createTextVNode(text, key) {\n    return createVNode(VNodeFlags.Text, null, null, text, null, key);\n}\nexport function isVNode(o) {\n    return !!o.flags;\n}", 
dependencies : ["~/packages/inferno-shared/dist-es","inferno-vnode-flags","./normalization","./options","../DOM/utils"], 
sourceMap : {},
headerContent : undefined, 
mtime : 1488885249000
};