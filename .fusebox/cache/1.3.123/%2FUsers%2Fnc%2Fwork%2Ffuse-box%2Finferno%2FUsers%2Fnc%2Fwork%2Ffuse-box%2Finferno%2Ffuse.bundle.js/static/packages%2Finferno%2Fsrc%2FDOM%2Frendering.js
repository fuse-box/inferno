module.exports = { contents : "import {\n    isBrowser,\n    isInvalid,\n    isNull,\n    isNullOrUndef,\n    Lifecycle,\n    NO_OP,\n    throwError,\n    warning\n} from '~/packages/inferno-shared/dist-es';\nimport VNodeFlags from 'inferno-vnode-flags';\nimport options from '../core/options';\nimport { cloneVNode } from '../core/VNodes';\nimport hydrateRoot from './hydration';\nimport { mount } from './mounting';\nimport { patch } from './patching';\nimport { unmount } from './unmounting';\nimport { EMPTY_OBJ } from './utils';\nexport const roots = [];\nexport const componentToDOMNodeMap = new Map();\noptions.roots = roots;\nexport function findDOMNode(ref) {\n    if (!options.findDOMNodeEnabled) {\n        if (process.env.NODE_ENV !== 'production') {\n            throwError('findDOMNode() has been disabled, use Inferno.options.findDOMNodeEnabled = true; enabled findDOMNode(). Warning this can significantly impact performance!');\n        }\n        throwError();\n    }\n    const dom = ref && ref.nodeType ? ref : null;\n    return componentToDOMNodeMap.get(ref) || dom;\n}\nfunction getRoot(dom) {\n    for (let i = 0, len = roots.length; i < len; i++) {\n        const root = roots[i];\n        if (root.dom === dom) {\n            return root;\n        }\n    }\n    return null;\n}\nfunction setRoot(dom, input, lifecycle) {\n    const root = {\n        dom,\n        input,\n        lifecycle\n    };\n    roots.push(root);\n    return root;\n}\nfunction removeRoot(root) {\n    for (let i = 0, len = roots.length; i < len; i++) {\n        if (roots[i] === root) {\n            roots.splice(i, 1);\n            return;\n        }\n    }\n}\nif (process.env.NODE_ENV !== 'production') {\n    if (isBrowser && document.body === null) {\n        warning('Inferno warning: you cannot initialize inferno without \"document.body\". Wait on \"DOMContentLoaded\" event, add script to bottom of body, or use async/defer attributes on script tag.');\n    }\n}\nconst documentBody = isBrowser ? document.body : null;\nexport function render(input, parentDom) {\n    if (documentBody === parentDom) {\n        if (process.env.NODE_ENV !== 'production') {\n            throwError('you cannot render() to the \"document.body\". Use an empty element as a container instead.');\n        }\n        throwError();\n    }\n    if (input === NO_OP) {\n        return;\n    }\n    let root = getRoot(parentDom);\n    if (isNull(root)) {\n        const lifecycle = new Lifecycle();\n        if (!isInvalid(input)) {\n            if (input.dom) {\n                input = cloneVNode(input);\n            }\n            if (!hydrateRoot(input, parentDom, lifecycle)) {\n                mount(input, parentDom, lifecycle, EMPTY_OBJ, false);\n            }\n            root = setRoot(parentDom, input, lifecycle);\n            lifecycle.trigger();\n        }\n    } else {\n        const lifecycle = root.lifecycle;\n        lifecycle.listeners = [];\n        if (isNullOrUndef(input)) {\n            unmount(root.input, parentDom, lifecycle, false, false);\n            removeRoot(root);\n        } else {\n            if (input.dom) {\n                input = cloneVNode(input);\n            }\n            patch(root.input, input, parentDom, lifecycle, EMPTY_OBJ, false, false);\n        }\n        lifecycle.trigger();\n        root.input = input;\n    }\n    if (root) {\n        const rootInput = root.input;\n        if (rootInput && rootInput.flags & VNodeFlags.Component) {\n            return rootInput.children;\n        }\n    }\n}\nexport function createRenderer(parentDom) {\n    return function renderer(lastInput, nextInput) {\n        if (!parentDom) {\n            parentDom = lastInput;\n        }\n        render(nextInput, parentDom);\n    };\n}", 
dependencies : ["~/packages/inferno-shared/dist-es","inferno-vnode-flags","../core/options","../core/VNodes","./hydration","./mounting","./patching","./unmounting","./utils","process"], 
sourceMap : {},
headerContent : ["/* fuse:injection: */ var process = require(\"process\");"], 
mtime : 1488885249000
};