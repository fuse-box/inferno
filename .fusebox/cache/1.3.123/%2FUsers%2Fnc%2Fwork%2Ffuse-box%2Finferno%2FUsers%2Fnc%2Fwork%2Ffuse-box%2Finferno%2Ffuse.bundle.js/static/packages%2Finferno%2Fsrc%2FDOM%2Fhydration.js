module.exports = { contents : "import {\n    isArray,\n    isNull,\n    isObject,\n    isStringOrNumber,\n    throwError,\n    warning\n} from '~/packages/inferno-shared/dist-es';\nimport VNodeFlags from 'inferno-vnode-flags';\nimport options from '../core/options';\nimport { svgNS } from './constants';\nimport {\n    mount,\n    mountClassComponentCallbacks,\n    mountElement,\n    mountFunctionalComponentCallbacks,\n    mountRef,\n    mountText\n} from './mounting';\nimport {\n    patchEvent,\n    patchProp\n} from './patching';\nimport { componentToDOMNodeMap } from './rendering';\nimport {\n    createClassComponentInstance,\n    createFunctionalComponentInput,\n    replaceChild,\n    EMPTY_OBJ\n} from './utils';\nimport processElement from './wrappers/processElement';\nexport function normalizeChildNodes(parentDom) {\n    let dom = parentDom.firstChild;\n    while (dom) {\n        if (dom.nodeType === 8) {\n            if (dom.data === '!') {\n                const placeholder = document.createTextNode('');\n                parentDom.replaceChild(placeholder, dom);\n                dom = dom.nextSibling;\n            } else {\n                const lastDom = dom.previousSibling;\n                parentDom.removeChild(dom);\n                dom = lastDom || parentDom.firstChild;\n            }\n        } else {\n            dom = dom.nextSibling;\n        }\n    }\n}\nfunction hydrateComponent(vNode, dom, lifecycle, context, isSVG, isClass) {\n    const type = vNode.type;\n    const ref = vNode.ref;\n    vNode.dom = dom;\n    const props = vNode.props || EMPTY_OBJ;\n    if (isClass) {\n        const _isSVG = dom.namespaceURI === svgNS;\n        const instance = createClassComponentInstance(vNode, type, props, context, _isSVG);\n        const input = instance._lastInput;\n        instance._vComponent = vNode;\n        instance._vNode = vNode;\n        hydrate(input, dom, lifecycle, instance._childContext, _isSVG);\n        mountClassComponentCallbacks(vNode, ref, instance, lifecycle);\n        options.findDOMNodeEnabled && componentToDOMNodeMap.set(instance, dom);\n        vNode.children = instance;\n    } else {\n        const input = createFunctionalComponentInput(vNode, type, props, context);\n        hydrate(input, dom, lifecycle, context, isSVG);\n        vNode.children = input;\n        vNode.dom = input.dom;\n        mountFunctionalComponentCallbacks(ref, dom, lifecycle);\n    }\n    return dom;\n}\nfunction hydrateElement(vNode, dom, lifecycle, context, isSVG) {\n    const children = vNode.children;\n    const props = vNode.props;\n    const events = vNode.events;\n    const flags = vNode.flags;\n    const ref = vNode.ref;\n    if (isSVG || flags & VNodeFlags.SvgElement) {\n        isSVG = true;\n    }\n    if (dom.nodeType !== 1 || dom.tagName.toLowerCase() !== vNode.type) {\n        if (process.env.NODE_ENV !== 'production') {\n            warning('Inferno hydration: Server-side markup doesn\\'t match client-side markup or Initial render target is not empty');\n        }\n        const newDom = mountElement(vNode, null, lifecycle, context, isSVG);\n        vNode.dom = newDom;\n        replaceChild(dom.parentNode, newDom, dom);\n        return newDom;\n    }\n    vNode.dom = dom;\n    if (children) {\n        hydrateChildren(children, dom, lifecycle, context, isSVG);\n    }\n    let hasControlledValue = false;\n    if (!(flags & VNodeFlags.HtmlElement)) {\n        hasControlledValue = processElement(flags, vNode, dom, false);\n    }\n    if (props) {\n        for (let prop in props) {\n            patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue);\n        }\n    }\n    if (events) {\n        for (let name in events) {\n            patchEvent(name, null, events[name], dom);\n        }\n    }\n    if (ref) {\n        mountRef(dom, ref, lifecycle);\n    }\n    return dom;\n}\nfunction hydrateChildren(children, parentDom, lifecycle, context, isSVG) {\n    normalizeChildNodes(parentDom);\n    let dom = parentDom.firstChild;\n    if (isArray(children)) {\n        for (let i = 0, len = children.length; i < len; i++) {\n            const child = children[i];\n            if (!isNull(child) && isObject(child)) {\n                if (dom) {\n                    dom = hydrate(child, dom, lifecycle, context, isSVG);\n                    dom = dom.nextSibling;\n                } else {\n                    mount(child, parentDom, lifecycle, context, isSVG);\n                }\n            }\n        }\n    } else if (isStringOrNumber(children)) {\n        if (dom && dom.nodeType === 3) {\n            if (dom.nodeValue !== children) {\n                dom.nodeValue = children;\n            }\n        } else if (children) {\n            parentDom.textContent = children;\n        }\n        dom = dom.nextSibling;\n    } else if (isObject(children)) {\n        hydrate(children, dom, lifecycle, context, isSVG);\n        dom = dom.nextSibling;\n    }\n    while (dom) {\n        const nextSibling = dom.nextSibling;\n        parentDom.removeChild(dom);\n        dom = nextSibling;\n    }\n}\nfunction hydrateText(vNode, dom) {\n    if (dom.nodeType !== 3) {\n        const newDom = mountText(vNode, null);\n        vNode.dom = newDom;\n        replaceChild(dom.parentNode, newDom, dom);\n        return newDom;\n    }\n    const text = vNode.children;\n    if (dom.nodeValue !== text) {\n        dom.nodeValue = text;\n    }\n    vNode.dom = dom;\n    return dom;\n}\nfunction hydrateVoid(vNode, dom) {\n    vNode.dom = dom;\n    return dom;\n}\nfunction hydrate(vNode, dom, lifecycle, context, isSVG) {\n    const flags = vNode.flags;\n    if (flags & VNodeFlags.Component) {\n        return hydrateComponent(vNode, dom, lifecycle, context, isSVG, flags & VNodeFlags.ComponentClass);\n    } else if (flags & VNodeFlags.Element) {\n        return hydrateElement(vNode, dom, lifecycle, context, isSVG);\n    } else if (flags & VNodeFlags.Text) {\n        return hydrateText(vNode, dom);\n    } else if (flags & VNodeFlags.Void) {\n        return hydrateVoid(vNode, dom);\n    } else {\n        if (process.env.NODE_ENV !== 'production') {\n            throwError(`hydrate() expects a valid VNode, instead it received an object with the type \"${ typeof vNode }\".`);\n        }\n        throwError();\n    }\n}\nexport default function hydrateRoot(input, parentDom, lifecycle) {\n    let dom = parentDom && parentDom.firstChild;\n    if (dom) {\n        hydrate(input, dom, lifecycle, EMPTY_OBJ, false);\n        dom = parentDom.firstChild;\n        while (dom = dom.nextSibling) {\n            parentDom.removeChild(dom);\n        }\n        return true;\n    }\n    return false;\n}", 
dependencies : ["~/packages/inferno-shared/dist-es","inferno-vnode-flags","../core/options","./constants","./mounting","./patching","./rendering","./utils","./wrappers/processElement","process"], 
sourceMap : {},
headerContent : ["/* fuse:injection: */ var process = require(\"process\");"], 
mtime : 1488885249000
};