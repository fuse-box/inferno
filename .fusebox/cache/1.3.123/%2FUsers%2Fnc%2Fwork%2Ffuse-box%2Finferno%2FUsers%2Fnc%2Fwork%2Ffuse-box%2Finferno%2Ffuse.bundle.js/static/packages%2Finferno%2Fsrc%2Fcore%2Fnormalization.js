module.exports = { contents : "import {\n    isArray,\n    isInvalid,\n    isNull,\n    isNullOrUndef,\n    isNumber,\n    isString,\n    isStringOrNumber,\n    warning,\n    isUndefined\n} from '~/packages/inferno-shared/dist-es';\nimport VNodeFlags from 'inferno-vnode-flags';\nimport {\n    cloneVNode,\n    createTextVNode,\n    isVNode\n} from './VNodes';\nfunction applyKey(key, vNode) {\n    vNode.key = key;\n    return vNode;\n}\nfunction applyKeyIfMissing(key, vNode) {\n    if (isNumber(key)) {\n        key = `.${ key }`;\n    }\n    if (isNull(vNode.key) || vNode.key[0] === '.') {\n        return applyKey(key, vNode);\n    }\n    return vNode;\n}\nfunction applyKeyPrefix(key, vNode) {\n    vNode.key = key + vNode.key;\n    return vNode;\n}\nfunction _normalizeVNodes(nodes, result, index, currentKey) {\n    for (let len = nodes.length; index < len; index++) {\n        let n = nodes[index];\n        const key = `${ currentKey }.${ index }`;\n        if (!isInvalid(n)) {\n            if (isArray(n)) {\n                _normalizeVNodes(n, result, 0, key);\n            } else {\n                if (isStringOrNumber(n)) {\n                    n = createTextVNode(n, null);\n                } else if (isVNode(n) && n.dom || n.key && n.key[0] === '.') {\n                    n = cloneVNode(n);\n                }\n                if (isNull(n.key) || n.key[0] === '.') {\n                    n = applyKey(key, n);\n                } else {\n                    n = applyKeyPrefix(currentKey, n);\n                }\n                result.push(n);\n            }\n        }\n    }\n}\nexport function normalizeVNodes(nodes) {\n    let newNodes;\n    if (nodes['$']) {\n        nodes = nodes.slice();\n    } else {\n        nodes['$'] = true;\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n        const n = nodes[i];\n        if (isInvalid(n) || isArray(n)) {\n            const result = (newNodes || nodes).slice(0, i);\n            _normalizeVNodes(nodes, result, i, ``);\n            return result;\n        } else if (isStringOrNumber(n)) {\n            if (!newNodes) {\n                newNodes = nodes.slice(0, i);\n            }\n            newNodes.push(applyKeyIfMissing(i, createTextVNode(n, null)));\n        } else if (isVNode(n) && n.dom || isNull(n.key) && !(n.flags & VNodeFlags.HasNonKeyedChildren)) {\n            if (!newNodes) {\n                newNodes = nodes.slice(0, i);\n            }\n            newNodes.push(applyKeyIfMissing(i, cloneVNode(n)));\n        } else if (newNodes) {\n            newNodes.push(applyKeyIfMissing(i, cloneVNode(n)));\n        }\n    }\n    return newNodes || nodes;\n}\nfunction normalizeChildren(children) {\n    if (isArray(children)) {\n        return normalizeVNodes(children);\n    } else if (isVNode(children) && children.dom) {\n        return cloneVNode(children);\n    }\n    return children;\n}\nfunction normalizeProps(vNode, props, children) {\n    if (!(vNode.flags & VNodeFlags.Component) && isNullOrUndef(children) && !isNullOrUndef(props.children)) {\n        vNode.children = props.children;\n    }\n    if (props.ref) {\n        vNode.ref = props.ref;\n        delete props.ref;\n    }\n    if (props.events) {\n        vNode.events = props.events;\n    }\n    if (!isNullOrUndef(props.key)) {\n        vNode.key = props.key;\n        delete props.key;\n    }\n}\nfunction normalizeElement(type, vNode) {\n    if (type === 'svg') {\n        vNode.flags = VNodeFlags.SvgElement;\n    } else if (type === 'input') {\n        vNode.flags = VNodeFlags.InputElement;\n    } else if (type === 'select') {\n        vNode.flags = VNodeFlags.SelectElement;\n    } else if (type === 'textarea') {\n        vNode.flags = VNodeFlags.TextareaElement;\n    } else if (type === 'media') {\n        vNode.flags = VNodeFlags.MediaElement;\n    } else {\n        vNode.flags = VNodeFlags.HtmlElement;\n    }\n}\nexport function normalize(vNode) {\n    let props = vNode.props;\n    const type = vNode.type;\n    let children = vNode.children;\n    if (vNode.flags & VNodeFlags.Component) {\n        const defaultProps = type.defaultProps;\n        if (!isNullOrUndef(defaultProps)) {\n            if (!props) {\n                props = vNode.props = defaultProps;\n            } else {\n                for (let prop in defaultProps) {\n                    if (isUndefined(props[prop])) {\n                        props[prop] = defaultProps[prop];\n                    }\n                }\n            }\n        }\n        if (isString(type)) {\n            normalizeElement(type, vNode);\n            if (props && props.children) {\n                vNode.children = props.children;\n                children = props.children;\n            }\n        }\n    }\n    if (props) {\n        normalizeProps(vNode, props, children);\n    }\n    if (!isInvalid(children)) {\n        vNode.children = normalizeChildren(children);\n    }\n    if (props && !isInvalid(props.children)) {\n        props.children = normalizeChildren(props.children);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        const verifyKeys = function (vNodes) {\n            const keyValues = vNodes.map(function (vnode) {\n                return vnode.key;\n            });\n            keyValues.some(function (item, idx) {\n                const hasDuplicate = keyValues.indexOf(item) !== idx;\n                if (hasDuplicate) {\n                    warning('Inferno normalisation(...): Encountered two children with same key, all keys must be unique within its siblings. Duplicated key is:' + item);\n                }\n                return hasDuplicate;\n            });\n        };\n        if (vNode.children && Array.isArray(vNode.children)) {\n            verifyKeys(vNode.children);\n        }\n    }\n}", 
dependencies : ["~/packages/inferno-shared/dist-es","inferno-vnode-flags","./VNodes","process"], 
sourceMap : {},
headerContent : ["/* fuse:injection: */ var process = require(\"process\");"], 
mtime : 1488885249000
};