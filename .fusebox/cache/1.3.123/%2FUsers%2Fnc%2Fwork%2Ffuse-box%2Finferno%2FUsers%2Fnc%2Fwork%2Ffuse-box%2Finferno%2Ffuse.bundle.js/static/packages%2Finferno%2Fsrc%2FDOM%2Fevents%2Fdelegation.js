module.exports = { contents : "import { isBrowser } from '~/packages/inferno-shared/dist-es';\nconst isiOS = isBrowser && !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\nconst delegatedEvents = new Map();\nexport function handleEvent(name, lastEvent, nextEvent, dom) {\n    let delegatedRoots = delegatedEvents.get(name);\n    if (nextEvent) {\n        if (!delegatedRoots) {\n            delegatedRoots = {\n                items: new Map(),\n                count: 0,\n                docEvent: null\n            };\n            delegatedRoots.docEvent = attachEventToDocument(name, delegatedRoots);\n            delegatedEvents.set(name, delegatedRoots);\n        }\n        if (!lastEvent) {\n            delegatedRoots.count++;\n            if (isiOS && name === 'onClick') {\n                trapClickOnNonInteractiveElement(dom);\n            }\n        }\n        delegatedRoots.items.set(dom, nextEvent);\n    } else if (delegatedRoots) {\n        if (delegatedRoots.items.has(dom)) {\n            delegatedRoots.count--;\n            delegatedRoots.items.delete(dom);\n            if (delegatedRoots.count === 0) {\n                document.removeEventListener(normalizeEventName(name), delegatedRoots.docEvent);\n                delegatedEvents.delete(name);\n            }\n        }\n    }\n}\nfunction dispatchEvent(event, dom, items, count, eventData) {\n    const eventsToTrigger = items.get(dom);\n    if (eventsToTrigger) {\n        count--;\n        eventData.dom = dom;\n        if (eventsToTrigger.event) {\n            eventsToTrigger.event(eventsToTrigger.data, event);\n        } else {\n            eventsToTrigger(event);\n        }\n        if (eventData.stopPropagation) {\n            return;\n        }\n    }\n    if (count > 0) {\n        const parentDom = dom.parentNode;\n        if (parentDom && parentDom.disabled !== true || parentDom === document.body) {\n            dispatchEvent(event, parentDom, items, count, eventData);\n        }\n    }\n}\nfunction normalizeEventName(name) {\n    return name.substr(2).toLowerCase();\n}\nfunction attachEventToDocument(name, delegatedRoots) {\n    const docEvent = event => {\n        const eventData = {\n            stopPropagation: false,\n            dom: document\n        };\n        Object.defineProperty(event, 'currentTarget', {\n            configurable: true,\n            get() {\n                return eventData.dom;\n            }\n        });\n        event.stopPropagation = () => {\n            eventData.stopPropagation = true;\n        };\n        const count = delegatedRoots.count;\n        if (count > 0) {\n            dispatchEvent(event, event.target, delegatedRoots.items, count, eventData);\n        }\n    };\n    document.addEventListener(normalizeEventName(name), docEvent);\n    return docEvent;\n}\nfunction emptyFn() {\n}\nfunction trapClickOnNonInteractiveElement(dom) {\n    dom.onclick = emptyFn;\n}", 
dependencies : ["~/packages/inferno-shared/dist-es"], 
sourceMap : {},
headerContent : undefined, 
mtime : 1488885249000
};