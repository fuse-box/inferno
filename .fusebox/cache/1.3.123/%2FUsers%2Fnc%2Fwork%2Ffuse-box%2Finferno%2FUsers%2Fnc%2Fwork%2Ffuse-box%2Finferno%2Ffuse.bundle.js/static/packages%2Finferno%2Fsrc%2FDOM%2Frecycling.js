module.exports = { contents : "import {\n    isNull,\n    isUndefined\n} from '~/packages/inferno-shared/dist-es';\nimport VNodeFlags from 'inferno-vnode-flags';\nimport {\n    patchComponent,\n    patchElement\n} from './patching';\nconst componentPools = new Map();\nconst elementPools = new Map();\nexport function recycleElement(vNode, lifecycle, context, isSVG) {\n    const tag = vNode.type;\n    const pools = elementPools.get(tag);\n    if (!isUndefined(pools)) {\n        const key = vNode.key;\n        const pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\n        if (!isUndefined(pool)) {\n            const recycledVNode = pool.pop();\n            if (!isUndefined(recycledVNode)) {\n                patchElement(recycledVNode, vNode, null, lifecycle, context, isSVG, true);\n                return vNode.dom;\n            }\n        }\n    }\n    return null;\n}\nexport function poolElement(vNode) {\n    const tag = vNode.type;\n    const key = vNode.key;\n    let pools = elementPools.get(tag);\n    if (isUndefined(pools)) {\n        pools = {\n            nonKeyed: [],\n            keyed: new Map()\n        };\n        elementPools.set(tag, pools);\n    }\n    if (isNull(key)) {\n        pools.nonKeyed.push(vNode);\n    } else {\n        let pool = pools.keyed.get(key);\n        if (isUndefined(pool)) {\n            pool = [];\n            pools.keyed.set(key, pool);\n        }\n        pool.push(vNode);\n    }\n}\nexport function recycleComponent(vNode, lifecycle, context, isSVG) {\n    const type = vNode.type;\n    const pools = componentPools.get(type);\n    if (!isUndefined(pools)) {\n        const key = vNode.key;\n        const pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\n        if (!isUndefined(pool)) {\n            const recycledVNode = pool.pop();\n            if (!isUndefined(recycledVNode)) {\n                const flags = vNode.flags;\n                const failed = patchComponent(recycledVNode, vNode, null, lifecycle, context, isSVG, flags & VNodeFlags.ComponentClass, true);\n                if (!failed) {\n                    return vNode.dom;\n                }\n            }\n        }\n    }\n    return null;\n}\nexport function poolComponent(vNode) {\n    const hooks = vNode.ref;\n    const nonRecycleHooks = hooks && (hooks.onComponentWillMount || hooks.onComponentWillUnmount || hooks.onComponentDidMount || hooks.onComponentWillUpdate || hooks.onComponentDidUpdate);\n    if (nonRecycleHooks) {\n        return;\n    }\n    const type = vNode.type;\n    const key = vNode.key;\n    let pools = componentPools.get(type);\n    if (isUndefined(pools)) {\n        pools = {\n            nonKeyed: [],\n            keyed: new Map()\n        };\n        componentPools.set(type, pools);\n    }\n    if (isNull(key)) {\n        pools.nonKeyed.push(vNode);\n    } else {\n        let pool = pools.keyed.get(key);\n        if (isUndefined(pool)) {\n            pool = [];\n            pools.keyed.set(key, pool);\n        }\n        pool.push(vNode);\n    }\n}", 
dependencies : ["~/packages/inferno-shared/dist-es","inferno-vnode-flags","./patching"], 
sourceMap : {},
headerContent : undefined, 
mtime : 1488885249000
};