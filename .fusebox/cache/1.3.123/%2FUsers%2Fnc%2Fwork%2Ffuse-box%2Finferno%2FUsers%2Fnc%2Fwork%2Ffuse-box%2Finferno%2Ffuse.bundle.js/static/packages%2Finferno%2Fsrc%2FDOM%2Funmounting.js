module.exports = { contents : "import {\n    isArray,\n    isFunction,\n    isInvalid,\n    isNull,\n    isNullOrUndef,\n    isObject,\n    throwError\n} from '~/packages/inferno-shared/dist-es';\nimport VNodeFlags from 'inferno-vnode-flags';\nimport options from '../core/options';\nimport { patchEvent } from './patching';\nimport {\n    poolComponent,\n    poolElement\n} from './recycling';\nimport { componentToDOMNodeMap } from './rendering';\nimport { removeChild } from './utils';\nexport function unmount(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\n    const flags = vNode.flags;\n    if (flags & VNodeFlags.Component) {\n        unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling);\n    } else if (flags & VNodeFlags.Element) {\n        unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling);\n    } else if (flags & (VNodeFlags.Text | VNodeFlags.Void)) {\n        unmountVoidOrText(vNode, parentDom);\n    }\n}\nfunction unmountVoidOrText(vNode, parentDom) {\n    if (parentDom) {\n        removeChild(parentDom, vNode.dom);\n    }\n}\nexport function unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\n    const instance = vNode.children;\n    const flags = vNode.flags;\n    const isStatefulComponent = flags & VNodeFlags.ComponentClass;\n    const ref = vNode.ref;\n    const dom = vNode.dom;\n    if (!isRecycling) {\n        if (isStatefulComponent) {\n            if (!instance._unmounted) {\n                instance._ignoreSetState = true;\n                options.beforeUnmount && options.beforeUnmount(vNode);\n                instance.componentWillUnmount && instance.componentWillUnmount();\n                if (ref && !isRecycling) {\n                    ref(null);\n                }\n                instance._unmounted = true;\n                options.findDOMNodeEnabled && componentToDOMNodeMap.delete(instance);\n                unmount(instance._lastInput, null, instance._lifecycle, false, isRecycling);\n            }\n        } else {\n            if (!isNullOrUndef(ref)) {\n                if (!isNullOrUndef(ref.onComponentWillUnmount)) {\n                    ref.onComponentWillUnmount(dom);\n                }\n            }\n            unmount(instance, null, lifecycle, false, isRecycling);\n        }\n    }\n    if (parentDom) {\n        let lastInput = instance._lastInput;\n        if (isNullOrUndef(lastInput)) {\n            lastInput = instance;\n        }\n        removeChild(parentDom, dom);\n    }\n    if (options.recyclingEnabled && !isStatefulComponent && (parentDom || canRecycle)) {\n        poolComponent(vNode);\n    }\n}\nexport function unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\n    const dom = vNode.dom;\n    const ref = vNode.ref;\n    const events = vNode.events;\n    if (ref && !isRecycling) {\n        unmountRef(ref);\n    }\n    const children = vNode.children;\n    if (!isNullOrUndef(children)) {\n        unmountChildren(children, lifecycle, isRecycling);\n    }\n    if (!isNull(events)) {\n        for (let name in events) {\n            patchEvent(name, events[name], null, dom);\n            events[name] = null;\n        }\n    }\n    if (parentDom) {\n        removeChild(parentDom, dom);\n    }\n    if (options.recyclingEnabled && (parentDom || canRecycle)) {\n        poolElement(vNode);\n    }\n}\nfunction unmountChildren(children, lifecycle, isRecycling) {\n    if (isArray(children)) {\n        for (let i = 0, len = children.length; i < len; i++) {\n            const child = children[i];\n            if (!isInvalid(child) && isObject(child)) {\n                unmount(child, null, lifecycle, false, isRecycling);\n            }\n        }\n    } else if (isObject(children)) {\n        unmount(children, null, lifecycle, false, isRecycling);\n    }\n}\nfunction unmountRef(ref) {\n    if (isFunction(ref)) {\n        ref(null);\n    } else {\n        if (isInvalid(ref)) {\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\n        }\n        throwError();\n    }\n}", 
dependencies : ["~/packages/inferno-shared/dist-es","inferno-vnode-flags","../core/options","./patching","./recycling","./rendering","./utils","process"], 
sourceMap : {},
headerContent : ["/* fuse:injection: */ var process = require(\"process\");"], 
mtime : 1488885249000
};