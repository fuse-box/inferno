module.exports = { contents : "import {\n    isArray,\n    isInvalid,\n    isNullOrUndef\n} from '~/packages/inferno-shared/dist-es';\nimport { isVNode } from '../../core/VNodes';\nimport { wrappers } from './processElement';\nimport { EMPTY_OBJ } from '../utils';\nfunction isControlled(props) {\n    return !isNullOrUndef(props.value);\n}\nfunction updateChildOptionGroup(vNode, value) {\n    const type = vNode.type;\n    if (type === 'optgroup') {\n        const children = vNode.children;\n        if (isArray(children)) {\n            for (let i = 0, len = children.length; i < len; i++) {\n                updateChildOption(children[i], value);\n            }\n        } else if (isVNode(children)) {\n            updateChildOption(children, value);\n        }\n    } else {\n        updateChildOption(vNode, value);\n    }\n}\nfunction updateChildOption(vNode, value) {\n    const props = vNode.props || EMPTY_OBJ;\n    const dom = vNode.dom;\n    dom.value = props.value;\n    if (isArray(value) && value.indexOf(props.value) !== -1 || props.value === value) {\n        dom.selected = true;\n    } else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {\n        dom.selected = props.selected || false;\n    }\n}\nfunction onSelectChange(e) {\n    const vNode = this.vNode;\n    const events = vNode.events || EMPTY_OBJ;\n    const dom = vNode.dom;\n    if (events.onChange) {\n        const event = events.onChange;\n        if (event.event) {\n            event.event(event.data, e);\n        } else {\n            event(e);\n        }\n    } else if (events.onchange) {\n        events.onchange(e);\n    }\n    applyValue(this.vNode, dom, false);\n}\nexport function processSelect(vNode, dom, mounting) {\n    const props = vNode.props || EMPTY_OBJ;\n    applyValue(vNode, dom, mounting);\n    if (isControlled(props)) {\n        let selectWrapper = wrappers.get(dom);\n        if (!selectWrapper) {\n            selectWrapper = { vNode };\n            dom.onchange = onSelectChange.bind(selectWrapper);\n            dom.onchange.wrapped = true;\n            wrappers.set(dom, selectWrapper);\n        }\n        selectWrapper.vNode = vNode;\n        return true;\n    }\n    return false;\n}\nexport function applyValue(vNode, dom, mounting) {\n    const props = vNode.props || EMPTY_OBJ;\n    if (props.multiple !== dom.multiple) {\n        dom.multiple = props.multiple;\n    }\n    const children = vNode.children;\n    if (!isInvalid(children)) {\n        let value = props.value;\n        if (mounting && isNullOrUndef(value)) {\n            value = props.defaultValue;\n        }\n        if (isArray(children)) {\n            for (let i = 0, len = children.length; i < len; i++) {\n                updateChildOptionGroup(children[i], value);\n            }\n        } else if (isVNode(children)) {\n            updateChildOptionGroup(children, value);\n        }\n    }\n}", 
dependencies : ["~/packages/inferno-shared/dist-es","../../core/VNodes","./processElement","../utils"], 
sourceMap : {},
headerContent : undefined, 
mtime : 1488885249000
};